{"version":3,"file":"static/js/871.e60f1172.chunk.js","mappings":"sMAyCA,UAlCgB,WACZ,OAAwCA,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAaR,OAXAE,EAAAA,EAAAA,YAAU,WACN,KACIC,EAAAA,EAAAA,IAAgBH,GAASI,MAAK,SAAAC,GAC1BR,EAAgBQ,EAASC,KAAKC,SAC9BR,GAAa,EAChB,GAGJ,CAFC,SACES,EAAAA,OAAAA,QAAe,8DAClB,CACJ,GAAE,CAACR,IAGCF,GAaK,uCAZN,8BACKF,EAAaa,OAAS,GACnB,wBACKb,EAAac,KAAI,SAAAC,GAAM,OACpB,2BACI,oCAAYA,EAAOC,WACnB,uBAAID,EAAOE,YAFNF,EAAOG,GADI,OAO5B,kEAIf,C,8MCpCKC,EAAU,mCAEVC,EAAkBC,EAAAA,EAAAA,OAAa,CACjCC,QAAS,iCAGAC,EAAW,mCAAG,2FACjBC,EAAS,CACXC,QAASN,GAFU,SAKVC,EAAgBM,IAAI,mBAAoB,CAACF,OAAAA,IAL/B,mFAAH,qDAQXG,EAAS,mCAAG,gGAAQC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAC9BL,EAAS,CACXC,QAASN,EACTS,MAAAA,EACAC,KAAAA,GAJiB,SAORT,EAAgBM,IAAI,eAAgB,CAACF,OAAAA,IAP7B,mFAAH,sDAUTM,EAAQ,mCAAG,WAAO1B,GAAP,8EACdoB,EAAS,CACXC,QAASN,GAFO,SAKPC,EAAgBM,IAAhB,gBAA6BtB,GAAW,CAACoB,OAAAA,IALlC,mFAAH,sDAQRO,EAAY,mCAAG,WAAO3B,GAAP,8EAClBoB,EAAS,CACXC,QAASN,GAFW,SAKXC,EAAgBM,IAAhB,gBAA6BtB,EAA7B,YAAgD,CAACoB,OAAAA,IALtC,mFAAH,sDAQZjB,EAAe,mCAAG,WAAOH,GAAP,8EACrBoB,EAAS,CACXC,QAASN,GAFc,SAKdC,EAAgBM,IAAhB,gBAA6BtB,EAA7B,YAAgD,CAACoB,OAAAA,IALnC,mFAAH,sDAQ5BG,EAAUK,UAAY,CAClBJ,MAAOK,IAAAA,OAAAA,WACPJ,KAAMI,IAAAA,OAAAA,YAGVH,EAASE,UAAY,CACjBE,OAAQD,IAAAA,OAAAA,YAGZF,EAAaC,UAAY,CACrBE,OAAQD,IAAAA,OAAAA,YAGZ1B,EAAgByB,UAAY,CACxBE,OAAQD,IAAAA,OAAAA,W","sources":["pages/Reviews/Reviews.jsx","services/fetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport { getMovieReviews } from 'services/fetch';\n\nconst Reviews = () => {\n    const [movieReviews, setMovieReviews] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const { movieId } = useParams();\n    \n    useEffect(() => {\n        try {\n            getMovieReviews(movieId).then(response => {\n                setMovieReviews(response.data.results);\n                setIsLoading(false);\n            });\n        } catch {\n            Notify.failure(\"Oops! Something in this life went wrong... Try again later.\")\n        };\n    }, [movieId]);\n\n    return (\n        !isLoading ?\n        <>\n            {movieReviews.length > 0 ?\n                <ul>\n                    {movieReviews.map(review => \n                        <li key={review.id}>\n                            <p>Author: {review.author}</p>\n                            <p>{review.content}</p>\n                            </li>\n                    )}\n                </ul> :\n                <p>We don't have reviews for this movie.</p>\n            }\n        </> : <p>Loading...</p>\n    );\n};\n\nexport default Reviews;","import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst API_KEY = 'cfdd02dd28707c6f234d1fe341252632';\n\nconst themoviedbFetch = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport const getTrending = async () => {\n    const params = {\n        api_key: API_KEY,\n    };\n    \n    return await themoviedbFetch.get('trending/all/day', {params});\n};\n\nexport const getSearch = async ({query, page}) => {\n    const params = {\n        api_key: API_KEY,\n        query,\n        page,\n    };\n    \n    return await themoviedbFetch.get('search/movie', {params});\n}\n\nexport const getMovie = async (movieId) => {\n    const params = {\n        api_key: API_KEY,\n    };\n\n    return await themoviedbFetch.get(`movie/${movieId}`, {params});\n}\n\nexport const getMovieCast = async (movieId) => {\n    const params = {\n        api_key: API_KEY,\n    };\n    \n    return await themoviedbFetch.get(`movie/${movieId}/credits`, {params});\n}\n\nexport const getMovieReviews = async (movieId) => {\n    const params = {\n        api_key: API_KEY,\n    };\n    \n    return await themoviedbFetch.get(`movie/${movieId}/reviews`, {params});\n}\n\ngetSearch.propTypes = {\n    query: PropTypes.string.isRequired,\n    page: PropTypes.number.isRequired,\n};\n\ngetMovie.propTypes = {\n    moviId: PropTypes.string.isRequired,\n};\n\ngetMovieCast.propTypes = {\n    moviId: PropTypes.string.isRequired,\n};\n\ngetMovieReviews.propTypes = {\n    moviId: PropTypes.string.isRequired,\n};"],"names":["useState","movieReviews","setMovieReviews","isLoading","setIsLoading","movieId","useParams","useEffect","getMovieReviews","then","response","data","results","Notify","length","map","review","author","content","id","API_KEY","themoviedbFetch","axios","baseURL","getTrending","params","api_key","get","getSearch","query","page","getMovie","getMovieCast","propTypes","PropTypes","moviId"],"sourceRoot":""}