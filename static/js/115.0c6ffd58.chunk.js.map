{"version":3,"file":"static/js/115.0c6ffd58.chunk.js","mappings":"sMA+CA,UAxCa,WACT,OAAkCA,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAYR,OAVAE,EAAAA,EAAAA,YAAU,WACN,KACIC,EAAAA,EAAAA,IAAaH,GAASI,MAAK,SAAAC,GACvBR,EAAaQ,EAASC,KAAKC,KAC9B,IAAEC,SAAQ,WAAOT,GAAa,EAAQ,GAG1C,CAFC,SACEU,EAAAA,OAAAA,QAAe,8DAClB,CACJ,GAAE,CAACT,IAGCF,GAoBK,uCAnBN,8BACKF,EAAUc,OAAS,GAChB,wBACKd,EAAUe,KAAI,SAAAC,GAAK,OAChB,0BACKA,EAAMC,eACH,gBACIC,IAAG,0CAAqCF,EAAMC,cAC9CE,IAAI,GACJC,MAAM,SAGd,uBAAIJ,EAAMK,QACV,kCAAUL,EAAMM,eATXN,EAAMO,GADC,OAcxB,yEAIf,C,8MC1CKC,EAAU,mCAEVC,EAAkBC,EAAAA,EAAAA,OAAa,CACjCC,QAAS,iCAGAC,EAAW,mCAAG,2FACjBC,EAAS,CACXC,QAASN,GAFU,SAKVC,EAAgBM,IAAI,mBAAoB,CAACF,OAAAA,IAL/B,mFAAH,qDAQXG,EAAS,mCAAG,gGAAQC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAC9BL,EAAS,CACXC,QAASN,EACTS,MAAAA,EACAC,KAAAA,GAJiB,SAORT,EAAgBM,IAAI,eAAgB,CAACF,OAAAA,IAP7B,mFAAH,sDAUTM,EAAQ,mCAAG,WAAO/B,GAAP,8EACdyB,EAAS,CACXC,QAASN,GAFO,SAKPC,EAAgBM,IAAhB,gBAA6B3B,GAAW,CAACyB,OAAAA,IALlC,mFAAH,sDAQRtB,EAAY,mCAAG,WAAOH,GAAP,8EAClByB,EAAS,CACXC,QAASN,GAFW,SAKXC,EAAgBM,IAAhB,gBAA6B3B,EAA7B,YAAgD,CAACyB,OAAAA,IALtC,mFAAH,sDAQZO,EAAe,mCAAG,WAAOhC,GAAP,8EACrByB,EAAS,CACXC,QAASN,GAFc,SAKdC,EAAgBM,IAAhB,gBAA6B3B,EAA7B,YAAgD,CAACyB,OAAAA,IALnC,mFAAH,sDAQ5BG,EAAUK,UAAY,CAClBJ,MAAOK,IAAAA,OAAAA,WACPJ,KAAMI,IAAAA,OAAAA,YAGVH,EAASE,UAAY,CACjBE,OAAQD,IAAAA,OAAAA,YAGZ/B,EAAa8B,UAAY,CACrBE,OAAQD,IAAAA,OAAAA,YAGZF,EAAgBC,UAAY,CACxBE,OAAQD,IAAAA,OAAAA,W","sources":["pages/Cast/Cast.jsx","services/fetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport { getMovieCast } from 'services/fetch';\n\nconst Cast = () => {\n    const [movieCast, setMovieCast] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const { movieId } = useParams();\n    \n    useEffect(() => {\n        try {\n            getMovieCast(movieId).then(response => {\n                setMovieCast(response.data.cast);\n            }).finally(() => {setIsLoading(false);});\n        } catch {\n            Notify.failure(\"Oops! Something in this life went wrong... Try again later.\")\n        };\n    }, [movieId]);\n\n    return (\n        !isLoading ?\n        <>\n            {movieCast.length > 0 ?\n                <ul>\n                    {movieCast.map(actor => \n                        <li key={actor.id}>\n                            {actor.profile_path &&\n                                <img\n                                    src={`https://image.tmdb.org/t/p/w300/${actor.profile_path}`}\n                                    alt=\"\"\n                                    width=\"100\"\n                                />\n                            }\n                            <p>{actor.name}</p>\n                            <p>Role: {actor.character}</p>\n                            </li>\n                    )}\n                </ul> :\n                <p>Sorry, we have no information about the cast</p>\n            }\n        </> : <p>Loading...</p>\n    );\n};\n\nexport default Cast;","import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst API_KEY = 'cfdd02dd28707c6f234d1fe341252632';\n\nconst themoviedbFetch = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport const getTrending = async () => {\n    const params = {\n        api_key: API_KEY,\n    };\n    \n    return await themoviedbFetch.get('trending/all/day', {params});\n};\n\nexport const getSearch = async ({query, page}) => {\n    const params = {\n        api_key: API_KEY,\n        query,\n        page,\n    };\n    \n    return await themoviedbFetch.get('search/movie', {params});\n}\n\nexport const getMovie = async (movieId) => {\n    const params = {\n        api_key: API_KEY,\n    };\n\n    return await themoviedbFetch.get(`movie/${movieId}`, {params});\n}\n\nexport const getMovieCast = async (movieId) => {\n    const params = {\n        api_key: API_KEY,\n    };\n    \n    return await themoviedbFetch.get(`movie/${movieId}/credits`, {params});\n}\n\nexport const getMovieReviews = async (movieId) => {\n    const params = {\n        api_key: API_KEY,\n    };\n    \n    return await themoviedbFetch.get(`movie/${movieId}/reviews`, {params});\n}\n\ngetSearch.propTypes = {\n    query: PropTypes.string.isRequired,\n    page: PropTypes.number.isRequired,\n};\n\ngetMovie.propTypes = {\n    moviId: PropTypes.string.isRequired,\n};\n\ngetMovieCast.propTypes = {\n    moviId: PropTypes.string.isRequired,\n};\n\ngetMovieReviews.propTypes = {\n    moviId: PropTypes.string.isRequired,\n};"],"names":["useState","movieCast","setMovieCast","isLoading","setIsLoading","movieId","useParams","useEffect","getMovieCast","then","response","data","cast","finally","Notify","length","map","actor","profile_path","src","alt","width","name","character","id","API_KEY","themoviedbFetch","axios","baseURL","getTrending","params","api_key","get","getSearch","query","page","getMovie","getMovieReviews","propTypes","PropTypes","moviId"],"sourceRoot":""}