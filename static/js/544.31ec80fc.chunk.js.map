{"version":3,"file":"static/js/544.31ec80fc.chunk.js","mappings":"oKAsBA,IAlBmB,SAAC,GAAc,IAAbA,EAAY,EAAZA,OACXC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,+BACI,wBACKF,EAAOG,KAAI,oBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,MAAOC,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,eAAgBC,EAAnC,EAAmCA,cAAnC,OACR,yBACI,SAAC,KAAD,CAAMC,GAAE,kBAAaL,GAAMM,MAAO,CAACC,KAAMV,GAAzC,oCACKI,QADL,IACKA,EAAAA,EAASC,SADd,QACsBC,SADtB,QACwCC,KAFnCJ,EADD,OAU3B,C,sFCSD,UArBa,WACT,OAA4BQ,EAAAA,EAAAA,UAAS,IAArC,eAAOZ,EAAP,KAAea,EAAf,KAYA,OAVAC,EAAAA,EAAAA,YAAU,WACN,KACIC,EAAAA,EAAAA,MAAcC,MAAK,SAAAC,GACfJ,EAAUI,EAASC,KAAKC,QAC3B,GAGJ,CAFC,SACEC,EAAAA,OAAAA,QAAe,8DAClB,CACJ,GAAE,KAGC,iCACI,4CACA,SAAC,IAAD,CAAYpB,OAAQA,MAG/B,C,8MCxBKqB,EAAU,mCAEVC,EAAkBC,EAAAA,EAAAA,OAAa,CACjCC,QAAS,iCAGAT,EAAW,mCAAG,2FACjBU,EAAS,CACXC,QAASL,GAFU,SAKVC,EAAgBK,IAAI,mBAAoB,CAACF,OAAAA,IAL/B,mFAAH,qDAQXG,EAAS,mCAAG,gGAAQC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAC9BL,EAAS,CACXC,QAASL,EACTQ,MAAAA,EACAC,KAAAA,GAJiB,SAORR,EAAgBK,IAAI,eAAgB,CAACF,OAAAA,IAP7B,mFAAH,sDAUTM,EAAQ,mCAAG,WAAOC,GAAP,8EACdP,EAAS,CACXC,QAASL,GAFO,SAKPC,EAAgBK,IAAhB,gBAA6BK,GAAW,CAACP,OAAAA,IALlC,mFAAH,sDAQRQ,EAAY,mCAAG,WAAOD,GAAP,8EAClBP,EAAS,CACXC,QAASL,GAFW,SAKXC,EAAgBK,IAAhB,gBAA6BK,EAA7B,YAAgD,CAACP,OAAAA,IALtC,mFAAH,sDAQZS,EAAe,mCAAG,WAAOF,GAAP,8EACrBP,EAAS,CACXC,QAASL,GAFc,SAKdC,EAAgBK,IAAhB,gBAA6BK,EAA7B,YAAgD,CAACP,OAAAA,IALnC,mFAAH,sDAQ5BG,EAAUO,UAAY,CAClBN,MAAOO,IAAAA,OAAAA,WACPN,KAAMM,IAAAA,OAAAA,YAGVL,EAASI,UAAY,CACjBE,OAAQD,IAAAA,OAAAA,YAGZH,EAAaE,UAAY,CACrBE,OAAQD,IAAAA,OAAAA,YAGZF,EAAgBC,UAAY,CACxBE,OAAQD,IAAAA,OAAAA,W","sources":["components/MoviesList/MoviesList.jsx","pages/Home/Home.jsx","services/fetch.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({movies}) => {\n    const location = useLocation();\n\n    return (\n        <>\n            <ul>\n                {movies.map(({id, title, name, original_title, original_name}) =>\n                    <li key={id}>\n                        <Link to={`/movies/${id}`} state={{from: location}}>\n                            {title ?? name ?? original_title ?? original_name}\n                        </Link>\n                    </li>\n                )}\n            </ul>\n        </>\n    );\n};\n\nexport default MoviesList\n\nMoviesList.propTypes = {\n    movies: PropTypes.array.isRequired,\n};","import { useState, useEffect } from 'react';\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nimport { getTrending } from 'services/fetch';\n\nconst Home = () => {\n    const [movies, setMovies] = useState([]);\n\n    useEffect(() => {\n        try {\n            getTrending().then(response => {\n                setMovies(response.data.results);\n            })\n        } catch {\n            Notify.failure(\"Oops! Something in this life went wrong... Try again later.\")\n        }\n    }, []);\n\n    return (\n        <>\n            <h2>Trending today</h2>\n            <MoviesList movies={movies}/>\n        </>\n    )\n};\n\nexport default Home;","import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst API_KEY = 'cfdd02dd28707c6f234d1fe341252632';\n\nconst themoviedbFetch = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport const getTrending = async () => {\n    const params = {\n        api_key: API_KEY,\n    };\n    \n    return await themoviedbFetch.get('trending/all/day', {params});\n};\n\nexport const getSearch = async ({query, page}) => {\n    const params = {\n        api_key: API_KEY,\n        query,\n        page,\n    };\n    \n    return await themoviedbFetch.get('search/movie', {params});\n}\n\nexport const getMovie = async (movieId) => {\n    const params = {\n        api_key: API_KEY,\n    };\n\n    return await themoviedbFetch.get(`movie/${movieId}`, {params});\n}\n\nexport const getMovieCast = async (movieId) => {\n    const params = {\n        api_key: API_KEY,\n    };\n    \n    return await themoviedbFetch.get(`movie/${movieId}/credits`, {params});\n}\n\nexport const getMovieReviews = async (movieId) => {\n    const params = {\n        api_key: API_KEY,\n    };\n    \n    return await themoviedbFetch.get(`movie/${movieId}/reviews`, {params});\n}\n\ngetSearch.propTypes = {\n    query: PropTypes.string.isRequired,\n    page: PropTypes.number.isRequired,\n};\n\ngetMovie.propTypes = {\n    moviId: PropTypes.string.isRequired,\n};\n\ngetMovieCast.propTypes = {\n    moviId: PropTypes.string.isRequired,\n};\n\ngetMovieReviews.propTypes = {\n    moviId: PropTypes.string.isRequired,\n};"],"names":["movies","location","useLocation","map","id","title","name","original_title","original_name","to","state","from","useState","setMovies","useEffect","getTrending","then","response","data","results","Notify","API_KEY","themoviedbFetch","axios","baseURL","params","api_key","get","getSearch","query","page","getMovie","movieId","getMovieCast","getMovieReviews","propTypes","PropTypes","moviId"],"sourceRoot":""}